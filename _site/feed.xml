<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AllanFlyAll</title>
    <description>Allen Zheng</description>
    <link>http://allanflyall.com/</link>
    <atom:link href="http://allanflyall.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 08 May 2016 22:56:11 -0300</pubDate>
    <lastBuildDate>Sun, 08 May 2016 22:56:11 -0300</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>js三种函数声明方式的比较</title>
        <description>&lt;p&gt;##&lt;b&gt;js三种函数声明方式的比较&lt;/b&gt;
javascript除了具有我们知道的function语句声明方式以外，还有两种声明方式：函数直接量式和Function构造式。下面来比较一下他们的异同&lt;/p&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;####function语句声明：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  function test1() {
          alert(&#39;i am test1&#39;);
 	}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;这个函数具有优先解析优先级，类似于全局变量。编译完成后放到内存中再开始顺序执行，执行到这里的时候回跳过这条函数声明&lt;/li&gt;
  &lt;li&gt;这样带来的好处是效率比较高，函数不会被反复声明&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;####函数直接量式：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  var test2 = function() {
          alert(&#39;i am test2&#39;);
  }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;这种方法最大的特点是类似于变量的先声明，后赋值在使用的特性。类似这样的用法：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; test(2);
 var test = funtion(a) {
     return a;
 }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在使用这种声明方式时是会报错的。&lt;/p&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;####Function构造式：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  var test3 = new Function(&quot;a&quot;, &quot;b&quot;, &quot;return a + b&quot;);
 	alert(test3(10, 20));
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;首先主语一定是Function，要大写。”a”, “b” 和语句要加引号&lt;/li&gt;
  &lt;li&gt;此方法最大特点是具有全局作用域&lt;/li&gt;
  &lt;li&gt;不过不会被保存在内存中，有可能被反复声明&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;####一个经典例子&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	function f(){return 1;}                // 函数1  
    alert(f());           
    var f = new Function(&quot;return 2;&quot;);      // 函数2 
    alert(f()); 
    var f = function(){return 3;}           // 函数3 
    alert(f());  
    function f(){return 4;}                 // 函数4 
    alert(f()); 
    var f = new Function(&quot;return 5&quot;);       // 函数5 
    alert(f()); 
    var f = function(){return 6 ;}          // 函数6 
    alert(f()); 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里alert出来的值的顺序是什么？&lt;/p&gt;

&lt;p&gt;答案是 ` 4 2 3 3 5 6`&lt;/p&gt;

&lt;p&gt;首先function语句声明会被优先解析，那么函数函数1，函数4会被首先解析。而函数4可以覆盖函数1，因为名字相同。那么内存中存下了函数4，下面开始顺序执行。
第一句已经在内存中，这里将跳过不执行，第二句输出了被覆盖的&lt;code class=&quot;highlighter-rouge&quot;&gt;f()&lt;/code&gt;输出&lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt;；第三句到第六句都是正常执行，输出&lt;code class=&quot;highlighter-rouge&quot;&gt;2 3&lt;/code&gt;;第七句和第一句一样被跳过，呢么第八句执行内存中的&lt;code class=&quot;highlighter-rouge&quot;&gt;f()&lt;/code&gt;，输出之前的&lt;code class=&quot;highlighter-rouge&quot;&gt;f()&lt;/code&gt;即&lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt;;之后继续顺序执行，输出&lt;code class=&quot;highlighter-rouge&quot;&gt;5 6&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 08 May 2016 00:00:00 -0300</pubDate>
        <link>http://allanflyall.com/blog/2016/05/08/js%E4%B8%89%E7%A7%8D%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E6%96%B9%E5%BC%8F%E7%9A%84%E6%AF%94%E8%BE%83/</link>
        <guid isPermaLink="true">http://allanflyall.com/blog/2016/05/08/js%E4%B8%89%E7%A7%8D%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E6%96%B9%E5%BC%8F%E7%9A%84%E6%AF%94%E8%BE%83/</guid>
        
        <category>js</category>
        
        <category>总结</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>js数组遍历的方法</title>
        <description>&lt;p&gt;##&lt;b&gt;js数组遍历的方法&lt;/b&gt;##
&lt;u&gt;除了for以外的用法&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;####&lt;code class=&quot;highlighter-rouge&quot;&gt; every&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;对于数组的每个元素进行运行如果都返回&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;，最后返回&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;判断数组元素是不是都大于2&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; var arr = [1, 2, 3, 4, 5, 6, 7]

 var res = arr.every(funtion(item, index, array){
     return item &amp;gt; 2;
 });
 return res //res = false
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;-
####&lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;
返回过滤后的结果&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	var res = arr.filter(funtion(item, index, array){
		return item &amp;gt; 2;
	});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;-
####&lt;code class=&quot;highlighter-rouge&quot;&gt; foreach&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	var res = arr.foreach(function(item, index, arr){
		//do something
	});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;-
####&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;数组对每个元素运行，完毕后返回新结果。常用于处理大量输入统一函数&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; var res = arr.map(function(item, index, arr){
     return item * 2;
 });
 alert(res); //[2, 4, 6, 8, 10, 12, 14]
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;-
####&lt;code class=&quot;highlighter-rouge&quot;&gt;some&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;与every对应，不过只要有一项返回&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;，则返回&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; var res = arr.some(funtion(item, index, array){
             return item &amp;gt;= 7;
         });
         return res //res = true
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;-
####&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;这个不算遍历方法不过也非常常用&lt;/li&gt;
  &lt;li&gt;有reduce和reduceRight,基本一样只不过reduceRight是从右边开始&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;传入方程prev, curr, index当前序号, array&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; var res = arr.reduce(funtion(prev, curr, index, array){
             return prev + curr;
         });
         return res //res = 
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 08 May 2016 00:00:00 -0300</pubDate>
        <link>http://allanflyall.com/blog/2016/05/08/js%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9F%BA%E6%9C%AC%E9%81%8D%E5%8E%86/</link>
        <guid isPermaLink="true">http://allanflyall.com/blog/2016/05/08/js%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9F%BA%E6%9C%AC%E9%81%8D%E5%8E%86/</guid>
        
        <category>js</category>
        
        <category>总结</category>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
