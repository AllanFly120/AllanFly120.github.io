<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AllanFlyAll</title>
    <description>Allen Zheng</description>
    <link>http://allanflyall.com/</link>
    <atom:link href="http://allanflyall.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 08 May 2016 19:00:31 -0300</pubDate>
    <lastBuildDate>Sun, 08 May 2016 19:00:31 -0300</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>js数组遍历的方法</title>
        <description>&lt;p&gt;##&lt;b&gt;js数组遍历的方法&lt;/b&gt;##
&lt;u&gt;除了for以外的用法&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;####&lt;code class=&quot;highlighter-rouge&quot;&gt; every&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;对于数组的每个元素进行运行如果都返回&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;，最后返回&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;判断数组元素是不是都大于2&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; var arr = [1, 2, 3, 4, 5, 6, 7]

 var res = arr.every(funtion(item, index, array){
     return item &amp;gt; 2;
 });
 return res //res = false
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;-
####&lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;
返回过滤后的结果&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	var res = arr.filter(funtion(item, index, array){
		return item &amp;gt; 2;
	});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;-
####&lt;code class=&quot;highlighter-rouge&quot;&gt; foreach&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	var res = arr.foreach(function(item, index, arr){
		//do something
	});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;-
####&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;数组对每个元素运行，完毕后返回新结果。常用于处理大量输入统一函数&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; var res = arr.map(function(item, index, arr){
     return item * 2;
 });
 alert(res); //[2, 4, 6, 8, 10, 12, 14]
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;-
####&lt;code class=&quot;highlighter-rouge&quot;&gt;some&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;与every对应，不过只要有一项返回&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;，则返回&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; var res = arr.some(funtion(item, index, array){
             return item &amp;gt;= 7;
         });
         return res //res = true
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;-
####&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;这个不算遍历方法不过也非常常用&lt;/li&gt;
  &lt;li&gt;有reduce和reduceRight,基本一样只不过reduceRight是从右边开始&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;传入方程prev, curr, index当前序号, array&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; var res = arr.reduce(funtion(prev, curr, index, array){
             return prev + curr;
         });
         return res //res = 
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 08 May 2016 00:00:00 -0300</pubDate>
        <link>http://allanflyall.com/blog/2016/05/08/js%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9F%BA%E6%9C%AC%E9%81%8D%E5%8E%86/</link>
        <guid isPermaLink="true">http://allanflyall.com/blog/2016/05/08/js%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9F%BA%E6%9C%AC%E9%81%8D%E5%8E%86/</guid>
        
        <category>js</category>
        
        <category>总结</category>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
